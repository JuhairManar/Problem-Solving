class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int n=nums.size(),s=0,i,j,f=0;
        for(auto g:nums)
        {
            s+=g;
        }
        if(s%2)
        {
            return 0;
        }
        s=s/2;
        //cout<<ts<<endl;
        vector<vector<int>>v(n,vector<int>(s+1,0));
/*         for(auto g:v)
        {
            for(auto h:g)
            {
                cout<<h<<" ";
            }
            cout<<endl;
        } */
        for(i=nums[0];i<=s;i++)
        {
            v[0][i]=nums[0];
        }
        //cout<<"YES\n";
        for(i=1;i<n;i++)
        {
            //cout<<"YES\n";
            if(nums[i]>s)
            {
                v[i]=v[i-1];
                continue;
            }
            for(j=0;j<nums[i];j++)
            {
                v[i][j]=v[i-1][j];
            }
            //cout<<"YES\n";
            for(j=nums[i];j<=s;j++)
            {
                v[i][j]=max(nums[i] +v [i-1] [j-nums[i]], v [i-1] [j]);
            }
            cout<<i <<"\n";
            if(v[i][s]==s)
            {
                return 1;
            }
        }
        return 0;
    }
};
